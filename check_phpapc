#!/usr/bin/php -q
<?php
# ------------------------------------------------------------------
# We offer no warantee or guarantee - use this code at your own risk!
# All code is Copyright (C) 2011, Applied Trust Engineering, Inc.
# ------------------------------------------------------------------

# Nagios plugin for monitoring the APC opcode cache for PHP.
# The apc.php status script (which ships with php-apc) must be installed on the system to be monitoried and made accessible via HTTP/HTTPS.
# See: https://github.com/nmcclain/home/ned/check_phpapc

## config
$service_name = "PHP-APC";
$wget_or_curl_command = "wget -O - -q ";

## read arguments/set default thresholds
$options = getopt("U:f:m:r:");
if (isset($options["U"])) {
        $url = $options["U"];
} else {
        usage();
}

$checks = array(
    'm' => array(
        'name' => 'max_used_memory_pct',
        'output' => '%d%% used mem',
        'comp' => 'ge',
        'warn' => 90,
        'crit' => null
    ),
    'f' => array(
        'name' => 'max_fragmentation_pct',
        'output' => '%d%% fragmentation',
        'comp' => 'ge',
        'warn' => 5,
        'crit' => null
    ),
    'r' => array(
        'name' => 'min_hit_rate_pct',
        'output' => '%d%% hit rate',
        'comp' => 'le',
        'warn' => 80,
        'crit' => null
    )
);

## fetch APC stats from apc.php
$cmd = $wget_or_curl_command.$url;
$results = `$cmd`;
$output=array();
$status=0;

## parse APC stats from apc.php output
if (preg_match_all('/Host Status Diagrams.*Free:\s+(\S+\s\S+)\s+\((\S+)%\).*Hits:\s+(\S+)\s+\((\S+)%\).*Used:\s+(\S+\s\S+)\s+\((\S+)%\).*Misses:\s+(\S+)\s+\((\S+)%\).*Fragmentation:\s+(\S+)%.*<\/body>/msU', $results, $matches)) {
    $free = $matches[1][0];
    $free_pct = $matches[2][0];
    $hits = $matches[3][0];
    $hits_pct = $matches[4][0];
    $used = $matches[5][0];
    $used_pct = $matches[6][0];
    $miss = $matches[7][0];
    $miss_pct = $matches[8][0];
    $frag_pct = $matches[9][0];

    $checks['m']['value'] = $used_pct;
    $checks['f']['value'] = $frag_pct;
    $checks['r']['value'] = $hits_pct;

    foreach ($checks as $opt => $check) {
        if (isset($options[$opt])) {
            $values = explode('/', $options[$opt]);
            $warn = array_shift($values);
            $crit = array_shift($values);
        } else {
            $warn = $check['warn'];
            $crit = $check['crit'];
        }

        if ($check['comp'] === 'ge') {
            if ($crit !== null && $check['value'] >= $crit) {
                $status = 2;
            } elseif ($check['value'] >= $warn) {
                $status = 1;
            }
        } elseif ($check['comp'] === 'le') {
            if ($crit !== null && $check['value'] <= $crit) {
                $status = 2;
            } elseif ($check['value'] <= $warn) {
                $status = 1;
            }
        }

        array_push($output, sprintf($check['output'], $check['value']));
    }

    $perf = " | free_pct=".$free_pct."; hits_pct=".$hits_pct."; miss_pct=".$miss_pct."; frag_pct=".$frag_pct;
} else {
    $output[] = "Could not parse apc.php output";
    $status=2;
}

## output results
echo $service_name;
if ($status == 0) {
    echo " OK: ";
} else if ($status == 1) {
    echo " WARNING: ";
} else {
    echo " CRITICAL: ";
}
echo join(', ',$output ).$perf."\n";

exit($status);

#########
function usage() {
    echo "Usage: check_phpapc -U <full URL to apc.php> [-m <max_used_memory_pct_warn>[/<max_used_memory_pct_crit>]] [-f <max_fragmentation_warn>[/<max_fragmentation_crit>]] [-r <min_cache_hit_rate_pct_warn>[/<min_cache_hit_rate_pct_crit>]]\n";
    echo "Usage example: check_phpapc -U http://admin.com/apc.php -m 80/90 -f 10 -r 90/75\n";
    exit(1);
}
